var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.973,1,1.973]],["body/modules/AppModule.html",[0,2.942,1,3.663,2,2.032,3,2.942,4,2.976,5,2.976,6,3.197,7,0.035,8,3.854,9,2.976,10,2.976,11,0.456,12,0.399,13,0.399,14,3.588,15,3.854,16,0.693,17,1.148,18,2.976,19,1.66,20,2.169,21,3.588,22,3.588,23,3.588,24,0.399,25,3.588,26,3.588,27,3.588,28,3.588,29,3.588,30,3.588,31,3.588,32,3.588,33,3.588,34,3.588,35,3.588,36,3.588,37,2.573,38,1.66,39,2.976,40,0.456,41,0.056,42,0.026,43,0.026]],["title/entities/Character.html",[44,1.196,45,0.91]],["body/entities/Character.html",[7,0.035,11,0.294,12,0.257,13,0.257,16,0.573,20,0.974,24,0.642,37,2.457,40,0.294,41,0.036,42,0.019,43,0.019,44,1.315,45,1.001,46,1.92,47,0.222,48,1.096,49,1.887,50,3.992,51,2.583,52,2.733,53,1.887,54,2.583,55,1.75,56,2.733,57,1.585,58,1.427,59,1.465,60,2.169,61,0.734,62,2.169,63,0.864,64,2.314,65,1.317,66,1.92,67,3.425,68,2.855,69,2.314,70,2.314,71,1.094,72,3.233,73,3.39,74,2.314,75,4.441,76,2.314,77,1.096,78,2.583,79,2.314,80,2.314,81,1.92,82,3.425,83,2.314,84,2.314,85,2.314,86,3.047,87,2.169,88,3.425,89,3.425,90,2.841,91,2.841,92,0.888,93,1.465,94,1.92,95,2.314,96,3.233]],["title/controllers/CharacterController.html",[97,1.196,98,1.973]],["body/controllers/CharacterController.html",[7,0.035,11,0.24,12,0.21,13,0.21,16,0.638,17,0.603,24,0.4,38,0.872,40,0.24,41,0.029,42,0.016,43,0.016,45,0.857,47,0.181,49,0.872,51,1.856,52,1.497,54,1.856,55,1.151,56,1.497,58,1.082,61,0.339,63,0.655,77,1.49,97,1.125,98,1.856,99,1.564,100,1.125,101,2.094,102,3.646,103,2.432,104,2.432,105,2.298,106,1.885,107,2.947,108,2.57,109,1.885,110,4.654,111,2.931,112,3.076,113,1.885,114,2.248,115,1.885,116,1.381,117,0.873,118,1.261,119,2.432,120,1.558,121,2.115,122,1.885,123,1.885,124,1.856,125,1.885,126,1.885,127,2.102,128,1.564,129,2.636,130,1.885,131,1.885,132,1.885,133,2.931,134,1.66,135,1.885,136,1.885,137,1.885,138,2.278,139,1.352,140,1.194,141,1.885,142,1.856,143,2.784,144,2.57,145,1.194,146,0.724,147,1.836,148,1.352,149,1.885,150,1.564,151,1.194,152,1.514,153,1.067,154,1.836,155,1.352,156,1.885,157,0.794,158,1.234,159,1.856,160,1.885,161,1.76,162,1.558,163,2.931,164,1.708,165,1.885,166,1.558,167,1.885,168,1.856,169,1.885,170,1.885,171,1.885,172,1.885,173,1.856,174,1.885,175,1.885,176,1.856,177,1.856,178,1.885,179,1.885,180,1.514,181,1.381,182,1.885,183,1.885,184,1.885,185,1.352]],["title/classes/CharacterDto.html",[41,0.048,108,1.973]],["body/classes/CharacterDto.html",[7,0.035,11,0.34,12,0.297,13,0.297,16,0.563,24,0.589,40,0.34,41,0.059,42,0.021,43,0.021,45,1.628,47,0.257,48,1.218,51,3.228,52,2.935,54,3.228,56,2.935,58,1.286,61,0.481,63,0.779,71,1.352,75,3.156,93,1.694,108,2.409,117,1.171,146,1.026,161,1.952,186,0.937,187,2.218,188,2.409,189,3.805,190,3.805,191,2.674,192,2.674,193,2.674,194,2.674,195,3.805,196,2.674,197,2.674,198,3.156,199,2.674,200,2.674,201,3.228,202,2.218,203,1.918,204,2.674,205,2.805,206,1.694,207,2.887,208,1.365,209,2.409,210,3.805,211,2.218,212,2.674,213,1.514,214,2.218,215,2.674,216,2.218]],["title/classes/CharacterService.html",[41,0.048,152,1.311]],["body/classes/CharacterService.html",[7,0.036,11,0.269,12,0.235,13,0.235,16,0.643,17,0.678,19,0.98,24,0.48,40,0.269,41,0.033,42,0.018,43,0.018,45,1.354,47,0.203,51,2.449,52,2.861,53,1.996,54,2.731,55,1.708,56,2.861,61,0.381,63,0.748,71,1.183,77,1.238,92,0.813,93,1.341,100,1.23,101,2.151,102,3.208,103,2.658,104,2.658,105,2.442,114,0.98,116,1.655,117,1.047,118,1.511,120,1.655,121,2.052,128,2.658,129,2.76,134,1.199,150,1.756,151,1.341,152,1.349,157,1.349,158,0.891,162,1.655,164,1.349,166,1.655,180,0.891,181,0.813,186,0.742,213,1.199,217,1.756,218,1.756,219,2.442,220,2.117,221,2.658,222,2.117,223,2.117,224,3.205,225,2.117,226,2.117,227,2.117,228,1.518,229,1.341,230,1.341,231,1.756,232,2.773,233,1.756,234,2.117,235,2.117,236,2.117,237,2.117,238,1.756,239,2.117,240,1.756,241,1.756,242,2.117,243,2.117]],["title/controllers/CommentController.html",[97,1.196,244,1.973]],["body/controllers/CommentController.html",[7,0.035,11,0.276,12,0.241,13,0.241,16,0.696,17,0.695,24,0.363,38,1.004,40,0.276,41,0.034,42,0.018,43,0.018,47,0.208,58,0.87,61,0.391,63,0.527,65,1.147,77,1.803,97,1.254,100,1.254,101,1.889,107,3.116,112,2.766,114,2.021,116,1.254,117,0.793,118,1.144,120,1.254,121,1.839,124,1.375,127,3.132,138,2.486,139,1.557,140,1.375,142,2.068,143,2.486,144,2.068,145,1.375,146,0.833,147,2.391,148,1.557,152,1.653,153,1.229,157,0.914,158,1.653,159,2.486,161,1.53,162,1.676,164,2.071,166,1.254,168,1.375,173,2.068,176,2.068,177,2.068,180,1.375,181,1.254,185,2.342,244,2.068,245,1.8,246,3.256,247,3.926,248,2.171,249,4.358,250,2.766,251,2.171,252,3.266,253,2.171,254,2.171,255,2.171,256,2.171,257,1.507,258,2.171,259,2.709,260,2.171,261,1.557,262,1.229,263,2.223,264,1.8,265,2.004,266,1.557,267,2.171,268,2.171,269,2.486,270,2.709,271,3.266,272,3.266,273,1.557,274,2.171,275,2.342,276,2.171,277,2.171,278,2.171]],["title/classes/CommentDto.html",[41,0.048,250,1.973]],["body/classes/CommentDto.html",[7,0.035,11,0.478,12,0.418,13,0.418,16,0.609,24,0.532,40,0.478,41,0.074,42,0.027,43,0.027,47,0.361,48,1.532,58,1.002,61,0.676,63,0.607,71,1.346,146,1.443,161,1.678,186,1.317,188,2.381,201,3.032,203,2.696,205,3.032,206,2.381,207,2.711,208,1.919,209,2.381,250,3.032,269,3.768,279,3.118,280,2.696,281,3.759,282,3.759,283,2.696]],["title/classes/CommentService.html",[41,0.048,263,1.764]],["body/classes/CommentService.html",[7,0.035,11,0.375,12,0.328,13,0.328,16,0.64,19,1.365,24,0.453,40,0.375,41,0.046,42,0.023,43,0.023,47,0.283,61,0.531,63,0.754,65,1.472,71,1.327,92,1.132,100,1.564,101,2.098,105,2.852,116,1.564,117,0.989,118,1.428,120,1.564,121,2.12,134,1.67,157,1.716,158,1.716,162,1.564,164,1.716,166,1.564,186,1.034,219,3.173,229,1.868,246,3.38,257,1.132,261,2.115,262,1.67,263,2.308,269,3.189,273,2.115,275,3.612,284,2.447,285,2.95,286,3.873,287,2.95,288,4.075,289,2.95,290,2.95,291,2.95,292,2.95,293,2.447,294,2.95,295,2.447,296,2.95,297,2.95,298,2.95,299,2.95]],["title/entities/Comments.html",[44,1.196,257,1.196]],["body/entities/Comments.html",[7,0.035,11,0.371,12,0.325,13,0.325,16,0.515,20,1.23,24,0.606,40,0.371,41,0.045,42,0.023,43,0.023,44,1.554,47,0.281,48,1.296,49,2.15,53,2.15,57,1.874,58,1.404,59,1.851,60,2.564,61,0.836,62,2.564,63,0.85,65,1.69,68,2.564,71,1.217,72,2.096,73,3.452,77,1.296,78,2.942,86,2.942,87,2.564,92,1.122,94,2.424,96,3.332,257,1.554,269,2.942,275,3.332,300,2.424,301,2.922,302,4.049,303,2.922,304,2.922,305,2.922,306,4.049,307,2.922,308,2.922,309,2.922,310,4.049,311,2.922]],["title/entities/Episode.html",[44,1.196,65,0.91]],["body/entities/Episode.html",[7,0.035,11,0.331,12,0.29,13,0.29,16,0.555,20,1.098,24,0.627,37,2.68,40,0.331,41,0.04,42,0.021,43,0.021,44,1.434,45,1.394,47,0.25,48,1.196,49,2.021,53,2.021,57,2.207,58,1.442,59,1.651,60,2.367,61,0.786,62,2.367,63,0.893,65,1.092,66,2.163,68,3.02,71,1.158,73,2.367,77,1.527,78,2.766,86,3.426,87,2.367,90,3.1,92,1.001,117,1.06,257,2.163,312,2.163,313,5.049,314,4.367,315,2.766,316,2.766,317,3.737,318,2.608,319,2.608,320,3.737,321,2.608,322,2.608,323,2.608,324,2.608,325,2.608,326,2.608,327,2.608,328,3.737,329,2.163,330,2.608]],["title/controllers/EpisodeController.html",[97,1.196,331,1.973]],["body/controllers/EpisodeController.html",[7,0.035,11,0.312,12,0.273,13,0.273,16,0.676,17,0.787,24,0.273,38,1.138,40,0.312,41,0.038,42,0.02,43,0.02,45,1.047,47,0.236,49,1.657,50,2.971,57,1.138,58,0.955,61,0.442,63,0.578,65,1.047,77,1.352,97,1.375,100,1.375,101,1.976,107,3.26,112,2.939,114,2.148,116,0.944,117,1.025,118,0.862,120,1.375,121,1.954,124,1.557,127,2.568,138,2.675,139,1.763,140,1.557,142,2.268,143,2.675,144,2.268,145,1.557,146,0.944,147,1.828,148,1.763,152,1.778,153,1.392,157,1.035,158,1.508,159,2.268,161,1.626,162,1.621,164,1.778,166,1.375,168,1.557,173,2.268,176,2.268,177,2.268,180,1.508,181,1.621,185,1.763,262,1.392,265,2.157,266,1.763,270,2.039,315,2.268,316,2.268,331,2.268,332,2.039,333,3.504,334,3.849,335,2.459,336,2.939,337,2.459,338,2.459,339,2.459,340,2.459,341,2.459,342,2.459,343,2.459,344,2.459,345,2.459,346,2.459,347,2.459]],["title/classes/EpisodeDto.html",[41,0.048,336,1.973]],["body/classes/EpisodeDto.html",[7,0.035,11,0.371,12,0.325,13,0.325,16,0.515,24,0.606,40,0.371,41,0.063,42,0.023,43,0.023,47,0.281,48,1.296,57,2.636,58,1.238,61,0.526,63,0.75,65,1.711,71,1.383,117,1.356,146,1.122,161,1.91,186,1.024,188,2.564,201,3.177,203,2.096,205,3.177,206,1.851,207,2.631,208,1.492,209,2.942,280,3.332,283,3.332,315,2.942,316,2.942,336,2.564,348,2.424,349,5.016,350,2.922,351,2.922,352,2.922,353,5.016,354,2.922,355,4.049]],["title/classes/EpisodeService.html",[41,0.048,265,1.59]],["body/classes/EpisodeService.html",[7,0.036,11,0.27,12,0.236,13,0.236,16,0.59,17,0.681,19,0.984,24,0.431,40,0.27,41,0.033,42,0.018,43,0.018,45,1.482,47,0.204,53,1.794,57,1.794,61,0.383,63,0.749,65,1.526,71,1.185,77,1.383,92,0.816,100,1.234,101,2.178,105,2.448,114,1.488,116,1.488,117,1.231,118,1.359,120,1.659,121,2.134,134,1.204,151,1.347,157,1.354,158,1.354,162,1.782,164,1.82,166,1.782,180,1.354,181,1.234,186,0.745,213,1.204,218,1.764,219,2.871,221,2.667,228,1.525,229,1.347,231,1.764,233,1.764,238,1.764,241,1.764,249,4.206,257,0.816,262,1.204,265,1.642,273,1.525,286,3.216,293,1.764,295,1.764,315,2.737,316,2.737,333,3.216,334,3.585,356,1.764,357,3.878,358,2.127,359,2.127,360,2.127,361,2.127,362,2.127,363,2.127,364,2.127,365,2.127,366,2.127,367,2.127,368,2.127,369,2.127,370,2.127,371,1.764,372,2.127,373,2.127,374,2.127,375,2.127,376,3.216,377,2.127,378,2.127,379,2.127]],["title/classes/FilterDto.html",[41,0.048,129,1.764]],["body/classes/FilterDto.html",[7,0.035,11,0.421,12,0.368,13,0.368,16,0.56,24,0.587,40,0.421,41,0.068,42,0.025,43,0.025,47,0.318,48,1.411,52,2.888,56,2.888,58,1.408,63,0.852,71,1.07,93,2.097,118,2.055,129,2.496,186,1.16,202,2.747,207,2.496,208,1.691,211,2.747,214,2.747,232,4.057,380,2.747,381,4.955,382,3.311,383,3.311,384,3.311,385,3.311,386,3.311,387,3.311,388,3.311,389,3.311,390,5.501,391,3.311]],["title/entities/Location.html",[44,1.196,55,0.997]],["body/entities/Location.html",[7,0.035,11,0.353,12,0.309,13,0.309,16,0.497,20,1.169,24,0.636,40,0.353,41,0.043,42,0.022,43,0.022,44,1.5,45,1.671,47,0.267,48,1.25,49,2.092,53,2.092,55,1.25,57,1.808,58,1.429,59,1.758,60,2.474,61,0.813,62,2.474,63,0.865,68,2.474,71,0.948,72,1.991,73,3.396,77,1.716,78,2.863,81,2.303,86,3.107,87,2.474,91,3.241,92,1.066,96,3.242,117,1.097,240,3.241,329,2.303,392,2.303,393,2.863,394,2.863,395,2.776,396,2.776,397,2.776,398,3.907,399,4.906,400,2.776,401,2.776,402,2.776]],["title/controllers/LocationController.html",[97,1.196,403,1.973]],["body/controllers/LocationController.html",[7,0.035,11,0.333,12,0.292,13,0.292,16,0.669,17,0.839,24,0.292,38,1.213,40,0.333,41,0.041,42,0.021,43,0.021,47,0.252,49,1.736,55,1.201,58,1,61,0.472,63,0.605,97,1.44,100,1.44,101,2.02,107,3.028,112,3.028,114,2.213,116,1.007,117,0.911,118,0.919,120,1.44,121,2.013,124,1.661,138,2.774,140,1.661,142,2.376,143,2.774,144,2.376,145,1.661,146,1.007,152,1.844,153,1.485,154,2.237,155,1.881,157,1.104,158,1.579,159,2.376,161,1.676,162,1.007,164,1.579,166,1.44,168,1.661,173,2.376,176,2.376,177,2.376,180,1.579,181,1.44,230,1.661,393,2.376,394,2.376,403,2.376,404,2.175,405,3.112,406,3.966,407,2.622,408,3.028,409,2.622,410,2.622,411,2.622,412,2.622,413,3.752,414,2.622,415,2.622,416,2.622,417,2.622,418,2.622,419,2.622,420,2.622,421,2.622]],["title/classes/LocationDto.html",[41,0.048,408,1.973]],["body/classes/LocationDto.html",[7,0.035,11,0.376,12,0.329,13,0.329,16,0.519,24,0.608,40,0.376,41,0.063,42,0.023,43,0.023,47,0.284,48,1.307,55,1.914,58,1.247,61,0.532,63,0.755,71,1.224,77,1.829,117,1.361,146,1.136,161,1.917,186,1.037,188,1.874,201,3.194,205,3.194,206,2.962,207,2.313,208,1.511,209,2.962,280,3.354,283,3.354,393,3.351,394,3.673,408,2.586,422,2.454,423,4.084,424,2.959,425,2.959,426,2.959]],["title/classes/LocationService.html",[41,0.048,154,1.59]],["body/classes/LocationService.html",[7,0.035,11,0.323,12,0.282,13,0.282,16,0.599,17,0.812,19,1.174,24,0.478,40,0.323,41,0.039,42,0.021,43,0.021,47,0.244,53,1.696,55,1.508,61,0.457,63,0.806,71,1.044,77,1.792,92,0.974,100,1.407,101,2.233,105,2.667,114,1.174,116,1.651,117,1.212,118,1.507,119,3.568,120,1.808,121,2.313,134,1.437,154,1.871,157,1.543,158,1.068,162,1.407,164,1.811,166,1.808,180,1.068,181,0.974,186,0.889,219,2.667,228,1.82,229,1.607,230,1.607,393,2.983,394,2.983,405,3.04,406,3.907,427,2.105,428,3.665,429,2.538,430,2.538,431,3.665,432,3.665,433,2.538,434,2.538,435,3.665,436,2.538,437,2.538,438,2.538,439,2.538,440,2.538,441,2.538,442,2.538,443,2.538,444,2.538]],["title/injectables/ParseIntPipe.html",[147,1.59,445,1.973]],["body/injectables/ParseIntPipe.html",[7,0.035,11,0.461,12,0.404,13,0.404,16,0.461,17,1.162,24,0.404,40,0.461,41,0.056,42,0.026,43,0.026,47,0.349,63,0.586,71,1.257,100,1.797,101,1.989,116,1.393,117,0.881,118,1.272,120,1.393,147,2.39,162,1.393,166,1.393,180,1.528,181,1.393,213,2.055,445,2.964,446,3.629,447,3.01,448,4.681,449,4.681,450,4.298,451,5.474,452,3.629,453,2.603,454,3.629,455,4.681,456,3.629,457,4.681,458,3.629,459,3.629,460,3.629,461,3.629,462,3.629]],["title/modules/TaskModule.html",[0,1.973,6,1.764]],["body/modules/TaskModule.html",[0,2.893,2,1.979,6,2.587,7,0.033,11,0.444,12,0.389,13,0.389,15,2.899,16,0.788,17,1.119,18,2.899,19,1.617,38,2.114,39,2.899,40,0.444,41,0.054,42,0.026,43,0.026,45,1.021,55,1.462,65,1.335,98,3.222,151,2.213,152,1.923,153,1.979,154,2.332,155,2.506,230,2.213,244,3.222,257,1.753,261,2.506,262,1.979,263,2.587,264,2.899,265,2.332,266,2.506,331,3.222,403,3.222,463,3.495,464,3.495,465,3.495,466,3.495,467,3.495,468,3.495]],["title/coverage.html",[469,3.034]],["body/coverage.html",[7,0.035,13,0.327,20,1.238,24,0.327,41,0.09,42,0.023,43,0.023,44,1.931,45,0.859,46,2.439,55,0.941,65,0.859,97,1.931,98,1.862,99,2.439,108,1.862,129,1.665,147,1.501,152,1.238,154,1.501,181,1.129,187,2.439,217,2.439,244,1.862,245,2.439,250,1.862,257,1.129,263,1.665,265,1.501,279,2.439,284,2.439,300,2.439,312,2.439,331,1.862,332,2.439,336,1.862,348,2.439,356,2.439,380,2.439,392,2.439,403,1.862,404,2.439,408,1.862,422,2.439,427,2.439,445,1.862,447,2.439,469,2.109,470,2.94,471,2.94,472,2.94,473,6.205,474,4.662,475,4.662,476,4.067,477,4.662,478,5.461,479,2.439,480,2.94,481,4.662,482,2.439,483,2.94,484,2.439,485,2.94,486,2.94]],["title/dependencies.html",[3,2.369,487,2.166]],["body/dependencies.html",[3,2.419,7,0.036,17,1.223,19,1.768,41,0.075,42,0.027,43,0.027,92,1.466,146,1.466,208,1.95,259,3.169,450,3.169,488,5.307,489,3.82,490,3.82,491,3.82,492,3.82,493,4.837,494,3.82,495,3.82,496,3.82,497,3.82,498,3.82,499,3.82,500,3.82,501,3.82,502,3.82,503,3.82,504,3.82,505,3.82,506,3.82,507,3.82,508,3.82,509,3.82,510,3.82,511,3.82,512,3.82,513,3.82]],["title/miscellaneous/enumerations.html",[514,1.333,515,3.103]],["body/miscellaneous/enumerations.html",[7,0.035,42,0.028,43,0.028,47,0.389,52,2.561,56,2.561,198,4.161,213,2.841,216,4.161,232,3.597,371,4.161,453,4.338,514,2.067,515,3.359,516,5.45,517,4.049,518,5.016,519,5.016,520,5.016]],["title/miscellaneous/functions.html",[514,1.333,521,3.103]],["body/miscellaneous/functions.html",[7,0.031,42,0.031,43,0.031,47,0.453,482,3.911,484,4.827,514,2.407,521,3.911,522,4.716]],["title/index.html",[47,0.251,523,2.612,524,2.612]],["body/index.html",[7,0.035,12,0.37,42,0.025,43,0.025,161,1.164,219,1.882,469,2.383,525,3.323,526,3.323,527,4.418,528,3.323,529,3.323,530,3.323,531,3.323,532,3.323,533,3.323,534,4.964,535,3.323,536,3.323,537,3.323,538,5.779,539,3.323,540,3.323,541,3.323,542,5.663,543,3.323,544,3.323,545,4.418,546,3.323,547,3.323,548,3.323,549,3.323,550,4.418,551,4.418,552,3.323,553,3.323,554,3.323,555,4.418,556,4.418,557,3.323,558,3.323,559,3.323,560,3.323,561,3.323,562,2.756,563,3.323,564,3.323,565,3.323,566,3.323,567,3.323,568,3.323,569,3.323,570,3.323,571,3.323,572,3.323,573,2.756,574,3.323,575,3.323,576,3.323,577,3.323,578,3.323,579,3.323,580,2.756]],["title/modules.html",[2,2.396]],["body/modules.html",[1,2.957,2,2.644,6,2.644,7,0.031,42,0.031,43,0.031,562,3.873,581,4.669,582,4.669,583,5.466,584,4.669,585,4.669]],["title/overview.html",[586,3.509]],["body/overview.html",[1,3.685,2,2.439,3,3.299,4,3.573,5,3.573,6,3.172,7,0.031,8,4.321,9,3.573,10,3.573,20,1.813,38,1.993,42,0.029,43,0.029,186,1.509,445,2.728,586,3.573,587,4.307,588,5.21,589,4.307,590,4.307]],["title/properties.html",[48,1.197,487,2.166]],["body/properties.html",[7,0.035,42,0.031,43,0.031,48,1.487,161,1.628,573,3.854,580,3.854,591,4.646,592,4.646,593,4.646]],["title/miscellaneous/variables.html",[514,1.333,594,3.103]],["body/miscellaneous/variables.html",[7,0.034,20,2.255,24,0.502,42,0.03,43,0.03,45,1.319,47,0.433,55,1.444,61,0.812,65,1.319,257,1.732,453,3.237,479,3.743,514,2.304,594,3.743,595,4.513]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":592,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":589,"title":{},"body":{"overview.html":{}}}],["10",{"_index":459,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["16.0.0",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":587,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["249",{"_index":302,"title":{},"body":{"entities/Comments.html":{}}}],["3.0.2",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["3306",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["4",{"_index":588,"title":{},"body":{"overview.html":{}}}],["4.3.0",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":590,"title":{},"body":{"overview.html":{}}}],["active",{"_index":198,"title":{},"body":{"classes/CharacterDto.html":{},"miscellaneous/enumerations.html":{}}}],["amazing",{"_index":563,"title":{},"body":{"index.html":{}}}],["apicreatedresponse",{"_index":142,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["apinotfoundresponse",{"_index":143,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["apiokresponse",{"_index":144,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["apiokresponse({description",{"_index":123,"title":{},"body":{"controllers/CharacterController.html":{}}}],["apiproperty",{"_index":201,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/LocationDto.html":{}}}],["apitags",{"_index":145,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["apitags('character",{"_index":156,"title":{},"body":{"controllers/CharacterController.html":{}}}],["apitags('comments",{"_index":267,"title":{},"body":{"controllers/CommentController.html":{}}}],["apitags('episode",{"_index":343,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["apitags('location",{"_index":416,"title":{},"body":{"controllers/LocationController.html":{}}}],["app",{"_index":540,"title":{},"body":{"index.html":{}}}],["applications",{"_index":533,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":451,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["asc",{"_index":371,"title":{},"body":{"classes/EpisodeService.html":{},"miscellaneous/enumerations.html":{}}}],["async",{"_index":101,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["author",{"_index":573,"title":{},"body":{"index.html":{},"properties.html":{}}}],["available",{"_index":585,"title":{},"body":{"modules.html":{}}}],["await",{"_index":164,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{}}}],["axios",{"_index":259,"title":{},"body":{"controllers/CommentController.html":{},"dependencies.html":{}}}],["axios.get('https://api.ipify.org/?format=json",{"_index":274,"title":{},"body":{"controllers/CommentController.html":{}}}],["backers",{"_index":564,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":454,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["badrequestexception('validation",{"_index":461,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["body",{"_index":107,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["bootstrap",{"_index":484,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":583,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":581,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":233,"title":{},"body":{"classes/CharacterService.html":{},"classes/EpisodeService.html":{}}}],["builder.andwhere('character.gender",{"_index":236,"title":{},"body":{"classes/CharacterService.html":{}}}],["builder.andwhere('character.status",{"_index":235,"title":{},"body":{"classes/CharacterService.html":{}}}],["builder.getmany",{"_index":238,"title":{},"body":{"classes/CharacterService.html":{},"classes/EpisodeService.html":{}}}],["builder.orderby('location.name",{"_index":237,"title":{},"body":{"classes/CharacterService.html":{}}}],["building",{"_index":528,"title":{},"body":{"index.html":{}}}],["catch",{"_index":176,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["character",{"_index":45,"title":{"entities/Character.html":{}},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"entities/Location.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["character.entity",{"_index":329,"title":{},"body":{"entities/Episode.html":{},"entities/Location.html":{}}}],["character.episodes.find",{"_index":378,"title":{},"body":{"classes/EpisodeService.html":{}}}],["character.episodes.push(result",{"_index":373,"title":{},"body":{"classes/EpisodeService.html":{}}}],["character.location",{"_index":240,"title":{},"body":{"classes/CharacterService.html":{},"entities/Location.html":{}}}],["charactercontroller",{"_index":98,"title":{"controllers/CharacterController.html":{}},"body":{"controllers/CharacterController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["characterdto",{"_index":108,"title":{"classes/CharacterDto.html":{}},"body":{"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"coverage.html":{}}}],["characterid",{"_index":127,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{}}}],["charactermodel",{"_index":221,"title":{},"body":{"classes/CharacterService.html":{},"classes/EpisodeService.html":{}}}],["characters",{"_index":313,"title":{},"body":{"entities/Episode.html":{}}}],["characters.episodes",{"_index":317,"title":{},"body":{"entities/Episode.html":{}}}],["characterservice",{"_index":152,"title":{"classes/CharacterService.html":{}},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["class",{"_index":41,"title":{"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{}},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":186,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":349,"title":{},"body":{"classes/EpisodeDto.html":{}}}],["column",{"_index":86,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}}}],["column({length",{"_index":301,"title":{},"body":{"entities/Comments.html":{}}}],["column({nullable",{"_index":72,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Location.html":{}}}],["column({type",{"_index":398,"title":{},"body":{"entities/Location.html":{}}}],["comment",{"_index":269,"title":{},"body":{"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{}}}],["comment'})@apinotfoundresponse({description",{"_index":253,"title":{},"body":{"controllers/CommentController.html":{}}}],["commentcontroller",{"_index":244,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["commentdto",{"_index":250,"title":{"classes/CommentDto.html":{}},"body":{"controllers/CommentController.html":{},"classes/CommentDto.html":{},"coverage.html":{}}}],["comments",{"_index":257,"title":{"entities/Comments.html":{}},"body":{"controllers/CommentController.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"classes/EpisodeService.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comments.entity",{"_index":330,"title":{},"body":{"entities/Episode.html":{}}}],["comments.episode",{"_index":320,"title":{},"body":{"entities/Episode.html":{}}}],["commentscount",{"_index":314,"title":{},"body":{"entities/Episode.html":{}}}],["commentservice",{"_index":263,"title":{"classes/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"classes/CommentService.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["commentsmodel",{"_index":288,"title":{},"body":{"classes/CommentService.html":{}}}],["commons/pipes/parseint.pipes",{"_index":148,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{}}}],["conflictexception",{"_index":137,"title":{},"body":{"controllers/CharacterController.html":{}}}],["conflictexception('a",{"_index":182,"title":{},"body":{"controllers/CharacterController.html":{}}}],["const",{"_index":162,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["constructor",{"_index":157,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{}}}],["constructor(charactermodel",{"_index":218,"title":{},"body":{"classes/CharacterService.html":{},"classes/EpisodeService.html":{}}}],["constructor(commentsmodel",{"_index":285,"title":{},"body":{"classes/CommentService.html":{}}}],["constructor(locationmodel",{"_index":429,"title":{},"body":{"classes/LocationService.html":{}}}],["controller",{"_index":97,"title":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{},"coverage.html":{}}}],["controllers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["controllers/character.controller",{"_index":464,"title":{},"body":{"modules/TaskModule.html":{}}}],["controllers/comment.controller",{"_index":465,"title":{},"body":{"modules/TaskModule.html":{}}}],["controllers/episode.controller",{"_index":466,"title":{},"body":{"modules/TaskModule.html":{}}}],["controllers/location.controller",{"_index":467,"title":{},"body":{"modules/TaskModule.html":{}}}],["coverage",{"_index":469,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createcharacter",{"_index":102,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{}}}],["createcharacter(firstname",{"_index":222,"title":{},"body":{"classes/CharacterService.html":{}}}],["createcharacter(locationid",{"_index":106,"title":{},"body":{"controllers/CharacterController.html":{}}}],["createcomment",{"_index":246,"title":{},"body":{"controllers/CommentController.html":{},"classes/CommentService.html":{}}}],["createcomment(characterid",{"_index":248,"title":{},"body":{"controllers/CommentController.html":{}}}],["createcomment(episode",{"_index":289,"title":{},"body":{"classes/CommentService.html":{}}}],["createcomment(episode:episode",{"_index":294,"title":{},"body":{"classes/CommentService.html":{}}}],["created",{"_index":49,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"entities/Location.html":{},"controllers/LocationController.html":{}}}],["created'})@apinotfoundresponse({description",{"_index":113,"title":{},"body":{"controllers/CharacterController.html":{}}}],["createdatecolumn",{"_index":87,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}}}],["createdatecolumn({type",{"_index":59,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}}}],["createepisode",{"_index":333,"title":{},"body":{"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{}}}],["createepisode(character",{"_index":359,"title":{},"body":{"classes/EpisodeService.html":{}}}],["createepisode(characterid",{"_index":335,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["createlocation",{"_index":405,"title":{},"body":{"controllers/LocationController.html":{},"classes/LocationService.html":{}}}],["createlocation(@body",{"_index":418,"title":{},"body":{"controllers/LocationController.html":{}}}],["createlocation(body",{"_index":407,"title":{},"body":{"controllers/LocationController.html":{}}}],["createlocation(name",{"_index":432,"title":{},"body":{"classes/LocationService.html":{}}}],["createquerybuilder('episodes",{"_index":366,"title":{},"body":{"classes/EpisodeService.html":{}}}],["current_timestamp(6",{"_index":62,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}}}],["data",{"_index":273,"title":{},"body":{"controllers/CommentController.html":{},"classes/CommentService.html":{},"classes/EpisodeService.html":{}}}],["data.ip",{"_index":276,"title":{},"body":{"controllers/CommentController.html":{}}}],["database",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":57,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"entities/Location.html":{}}}],["dead",{"_index":520,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":58,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{}}}],["default",{"_index":61,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":63,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":519,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["description",{"_index":161,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":541,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["double",{"_index":399,"title":{},"body":{"entities/Location.html":{}}}],["dtos/character.dto",{"_index":149,"title":{},"body":{"controllers/CharacterController.html":{}}}],["dtos/comment.dto",{"_index":260,"title":{},"body":{"controllers/CommentController.html":{}}}],["dtos/episode.dto",{"_index":342,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["dtos/filter.dto",{"_index":150,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{}}}],["dtos/location.dto",{"_index":415,"title":{},"body":{"controllers/LocationController.html":{}}}],["e2e",{"_index":552,"title":{},"body":{"index.html":{}}}],["eager",{"_index":68,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}}}],["efficient",{"_index":529,"title":{},"body":{"index.html":{}}}],["empty",{"_index":283,"title":{},"body":{"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/LocationDto.html":{}}}],["empty.'})@apiproperty({type",{"_index":280,"title":{},"body":{"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/LocationDto.html":{}}}],["entities",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/character.entity",{"_index":151,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"classes/EpisodeService.html":{},"modules/TaskModule.html":{}}}],["entities/comments.entity",{"_index":261,"title":{},"body":{"controllers/CommentController.html":{},"classes/CommentService.html":{},"modules/TaskModule.html":{}}}],["entities/episode.entity",{"_index":262,"title":{},"body":{"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"modules/TaskModule.html":{}}}],["entities/location.entity",{"_index":230,"title":{},"body":{"classes/CharacterService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"modules/TaskModule.html":{}}}],["entity",{"_index":44,"title":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{},"coverage.html":{}}}],["enum",{"_index":75,"title":{},"body":{"entities/Character.html":{},"classes/CharacterDto.html":{}}}],["enum/index.enum",{"_index":93,"title":{},"body":{"entities/Character.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"classes/FilterDto.html":{}}}],["enumerations",{"_index":515,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["episode",{"_index":65,"title":{"entities/Episode.html":{}},"body":{"entities/Character.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["episode'})@apinotfoundresponse({description",{"_index":338,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["episode.comments",{"_index":306,"title":{},"body":{"entities/Comments.html":{}}}],["episode.comments.push(result",{"_index":297,"title":{},"body":{"classes/CommentService.html":{}}}],["episode.entity",{"_index":94,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{}}}],["episode.id",{"_index":379,"title":{},"body":{"classes/EpisodeService.html":{}}}],["episodecode",{"_index":315,"title":{},"body":{"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{}}}],["episodecontroller",{"_index":331,"title":{"controllers/EpisodeController.html":{}},"body":{"controllers/EpisodeController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["episodedto",{"_index":336,"title":{"classes/EpisodeDto.html":{}},"body":{"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"coverage.html":{}}}],["episodeid",{"_index":249,"title":{},"body":{"controllers/CommentController.html":{},"classes/EpisodeService.html":{}}}],["episodemodel",{"_index":286,"title":{},"body":{"classes/CommentService.html":{},"classes/EpisodeService.html":{}}}],["episodes",{"_index":50,"title":{},"body":{"entities/Character.html":{},"controllers/EpisodeController.html":{}}}],["episodes.characters",{"_index":67,"title":{},"body":{"entities/Character.html":{}}}],["episodes.comments",{"_index":369,"title":{},"body":{"classes/EpisodeService.html":{}}}],["episodeservice",{"_index":265,"title":{"classes/EpisodeService.html":{}},"body":{"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["er_dup_entry",{"_index":179,"title":{},"body":{"controllers/CharacterController.html":{}}}],["error",{"_index":177,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["export",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{}}}],["express",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["failed",{"_index":462,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["false",{"_index":73,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}}}],["female",{"_index":216,"title":{},"body":{"classes/CharacterDto.html":{},"miscellaneous/enumerations.html":{}}}],["female'])@apiproperty({enum",{"_index":193,"title":{},"body":{"classes/CharacterDto.html":{}}}],["file",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["filterdto",{"_index":129,"title":{"classes/FilterDto.html":{}},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"classes/FilterDto.html":{},"coverage.html":{}}}],["first",{"_index":190,"title":{},"body":{"classes/CharacterDto.html":{}}}],["firstname",{"_index":51,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{}}}],["found",{"_index":114,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{}}}],["found'})@get('/:characterid/character",{"_index":125,"title":{},"body":{"controllers/CharacterController.html":{}}}],["framework",{"_index":527,"title":{},"body":{"index.html":{}}}],["function",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":521,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":52,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"classes/FilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["get('/:characterid/character",{"_index":183,"title":{},"body":{"controllers/CharacterController.html":{}}}],["get('/:characterid/episode/:episodeid/comments",{"_index":278,"title":{},"body":{"controllers/CommentController.html":{}}}],["get('/:characterid/episode/:episodeid/comments')@apiokresponse({description",{"_index":256,"title":{},"body":{"controllers/CommentController.html":{}}}],["get('/characters",{"_index":167,"title":{},"body":{"controllers/CharacterController.html":{}}}],["get('/characters')@apiokresponse({description",{"_index":130,"title":{},"body":{"controllers/CharacterController.html":{}}}],["get('/episodes",{"_index":344,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["get('/episodes')@apiokresponse({description",{"_index":340,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["get('/hello",{"_index":160,"title":{},"body":{"controllers/CharacterController.html":{}}}],["get('/hello')@apiokresponse({description",{"_index":132,"title":{},"body":{"controllers/CharacterController.html":{}}}],["get('/location",{"_index":420,"title":{},"body":{"controllers/LocationController.html":{}}}],["get('/location')@apiokresponse({description",{"_index":412,"title":{},"body":{"controllers/LocationController.html":{}}}],["getcharacter",{"_index":103,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{}}}],["getcharacter(@param('characterid",{"_index":184,"title":{},"body":{"controllers/CharacterController.html":{}}}],["getcharacter(characterid",{"_index":122,"title":{},"body":{"controllers/CharacterController.html":{}}}],["getcharacter(id",{"_index":224,"title":{},"body":{"classes/CharacterService.html":{}}}],["getcharacters",{"_index":104,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{}}}],["getcharacters(@query",{"_index":169,"title":{},"body":{"controllers/CharacterController.html":{}}}],["getcharacters(filterdto",{"_index":128,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{}}}],["getcomments",{"_index":247,"title":{},"body":{"controllers/CommentController.html":{}}}],["getcomments(characterid",{"_index":255,"title":{},"body":{"controllers/CommentController.html":{}}}],["getepisode",{"_index":357,"title":{},"body":{"classes/EpisodeService.html":{}}}],["getepisode(character",{"_index":377,"title":{},"body":{"classes/EpisodeService.html":{}}}],["getepisode(episodeid",{"_index":361,"title":{},"body":{"classes/EpisodeService.html":{}}}],["getepisodes",{"_index":334,"title":{},"body":{"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{}}}],["gethello",{"_index":105,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"classes/CommentService.html":{},"classes/EpisodeService.html":{},"classes/LocationService.html":{}}}],["getlocation",{"_index":428,"title":{},"body":{"classes/LocationService.html":{}}}],["getlocation(locationid",{"_index":435,"title":{},"body":{"classes/LocationService.html":{}}}],["getlocations",{"_index":406,"title":{},"body":{"controllers/LocationController.html":{},"classes/LocationService.html":{}}}],["getting",{"_index":523,"title":{"index.html":{}},"body":{}}],["global_accelerexdb",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":584,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":559,"title":{},"body":{"index.html":{}}}],["hello",{"_index":134,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"classes/CommentService.html":{},"classes/EpisodeService.html":{},"classes/LocationService.html":{}}}],["helloresponse",{"_index":163,"title":{},"body":{"controllers/CharacterController.html":{}}}],["here",{"_index":570,"title":{},"body":{"index.html":{}}}],["host",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":577,"title":{},"body":{"index.html":{}}}],["id",{"_index":53,"title":{},"body":{"entities/Character.html":{},"classes/CharacterService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"classes/EpisodeService.html":{},"entities/Location.html":{},"classes/LocationService.html":{}}}],["identifier",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["if(!location",{"_index":443,"title":{},"body":{"classes/LocationService.html":{}}}],["if(error.code",{"_index":178,"title":{},"body":{"controllers/CharacterController.html":{}}}],["implements",{"_index":456,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["import",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{}}}],["imports",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{}}}],["injectable",{"_index":445,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":446,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["injectrepository",{"_index":229,"title":{},"body":{"classes/CharacterService.html":{},"classes/CommentService.html":{},"classes/EpisodeService.html":{},"classes/LocationService.html":{}}}],["injectrepository(character",{"_index":231,"title":{},"body":{"classes/CharacterService.html":{},"classes/EpisodeService.html":{}}}],["injectrepository(comments",{"_index":292,"title":{},"body":{"classes/CommentService.html":{}}}],["injectrepository(episode",{"_index":293,"title":{},"body":{"classes/CommentService.html":{},"classes/EpisodeService.html":{}}}],["injectrepository(location",{"_index":438,"title":{},"body":{"classes/LocationService.html":{}}}],["installation",{"_index":537,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":539,"title":{},"body":{"index.html":{}}}],["internalservererrorexception",{"_index":138,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["ipaddresslocation",{"_index":275,"title":{},"body":{"controllers/CommentController.html":{},"classes/CommentService.html":{},"entities/Comments.html":{}}}],["isdate",{"_index":355,"title":{},"body":{"classes/EpisodeDto.html":{}}}],["isdate()@isnotempty({message",{"_index":352,"title":{},"body":{"classes/EpisodeDto.html":{}}}],["isenum",{"_index":202,"title":{},"body":{"classes/CharacterDto.html":{},"classes/FilterDto.html":{}}}],["isenum(gender",{"_index":214,"title":{},"body":{"classes/CharacterDto.html":{},"classes/FilterDto.html":{}}}],["isenum(sort",{"_index":391,"title":{},"body":{"classes/FilterDto.html":{}}}],["isenum(status",{"_index":211,"title":{},"body":{"classes/CharacterDto.html":{},"classes/FilterDto.html":{}}}],["isin",{"_index":203,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"classes/EpisodeDto.html":{}}}],["isin(['dead",{"_index":212,"title":{},"body":{"classes/CharacterDto.html":{}}}],["isin(['male",{"_index":215,"title":{},"body":{"classes/CharacterDto.html":{}}}],["isint",{"_index":204,"title":{},"body":{"classes/CharacterDto.html":{}}}],["isnan(val",{"_index":460,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":205,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/LocationDto.html":{}}}],["isnumber",{"_index":206,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/LocationDto.html":{}}}],["isnumber()@isnotempty({message",{"_index":423,"title":{},"body":{"classes/LocationDto.html":{}}}],["isoptional",{"_index":390,"title":{},"body":{"classes/FilterDto.html":{}}}],["isoptional()@isenum(gender",{"_index":382,"title":{},"body":{"classes/FilterDto.html":{}}}],["isoptional()@isenum(sort",{"_index":386,"title":{},"body":{"classes/FilterDto.html":{}}}],["isoptional()@isenum(status",{"_index":388,"title":{},"body":{"classes/FilterDto.html":{}}}],["isoptional()@isstring",{"_index":384,"title":{},"body":{"classes/FilterDto.html":{}}}],["isstring",{"_index":207,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/FilterDto.html":{},"classes/LocationDto.html":{}}}],["isstring()@isenum(gender)@isin(['male",{"_index":192,"title":{},"body":{"classes/CharacterDto.html":{}}}],["isstring()@isenum(status)@isin(['dead",{"_index":197,"title":{},"body":{"classes/CharacterDto.html":{}}}],["isstring()@isnotempty({message",{"_index":188,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/LocationDto.html":{}}}],["join",{"_index":566,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":88,"title":{},"body":{"entities/Character.html":{}}}],["jointable",{"_index":89,"title":{},"body":{"entities/Character.html":{}}}],["kamil",{"_index":574,"title":{},"body":{"index.html":{}}}],["last",{"_index":195,"title":{},"body":{"classes/CharacterDto.html":{}}}],["lastname",{"_index":54,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{}}}],["latitude",{"_index":393,"title":{},"body":{"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{}}}],["leftjoinandselect('episodes.comments",{"_index":367,"title":{},"body":{"classes/EpisodeService.html":{}}}],["length",{"_index":311,"title":{},"body":{"entities/Comments.html":{}}}],["license",{"_index":580,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":556,"title":{},"body":{"index.html":{}}}],["list",{"_index":111,"title":{},"body":{"controllers/CharacterController.html":{}}}],["loadrelationcountandmap('episodes.commentscount",{"_index":368,"title":{},"body":{"classes/EpisodeService.html":{}}}],["localhost",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["location",{"_index":55,"title":{"entities/Location.html":{}},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["location'})@apinotfoundresponse({description",{"_index":410,"title":{},"body":{"controllers/LocationController.html":{}}}],["location.character",{"_index":82,"title":{},"body":{"entities/Character.html":{}}}],["location.entity",{"_index":95,"title":{},"body":{"entities/Character.html":{}}}],["locationcontroller",{"_index":403,"title":{"controllers/LocationController.html":{}},"body":{"controllers/LocationController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["locationdto",{"_index":408,"title":{"classes/LocationDto.html":{}},"body":{"controllers/LocationController.html":{},"classes/LocationDto.html":{},"coverage.html":{}}}],["locationid",{"_index":119,"title":{},"body":{"controllers/CharacterController.html":{},"classes/LocationService.html":{}}}],["locationmodel",{"_index":431,"title":{},"body":{"classes/LocationService.html":{}}}],["locations",{"_index":413,"title":{},"body":{"controllers/LocationController.html":{}}}],["locationservice",{"_index":154,"title":{"classes/LocationService.html":{}},"body":{"controllers/CharacterController.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["longitude",{"_index":394,"title":{},"body":{"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{}}}],["made",{"_index":252,"title":{},"body":{"controllers/CommentController.html":{}}}],["male",{"_index":518,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manytomany",{"_index":90,"title":{},"body":{"entities/Character.html":{},"entities/Episode.html":{}}}],["manytomany(undefined",{"_index":66,"title":{},"body":{"entities/Character.html":{},"entities/Episode.html":{}}}],["manytoone",{"_index":310,"title":{},"body":{"entities/Comments.html":{}}}],["manytoone(undefined",{"_index":305,"title":{},"body":{"entities/Comments.html":{}}}],["matching",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":282,"title":{},"body":{"classes/CommentDto.html":{}}}],["message",{"_index":209,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/LocationDto.html":{}}}],["metadata",{"_index":450,"title":{},"body":{"injectables/ParseIntPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":100,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["miscellaneous",{"_index":514,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":210,"title":{},"body":{"classes/CharacterDto.html":{}}}],["missing.'})@apiproperty({type",{"_index":189,"title":{},"body":{"classes/CharacterDto.html":{}}}],["mit",{"_index":555,"title":{},"body":{"index.html":{}}}],["mode",{"_index":545,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":569,"title":{},"body":{"index.html":{}}}],["mts121101",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":575,"title":{},"body":{"index.html":{}}}],["name",{"_index":117,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["nest",{"_index":534,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":579,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":146,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"classes/CharacterService.html":{},"classes/CommentService.html":{},"classes/EpisodeService.html":{},"classes/LocationService.html":{},"modules/TaskModule.html":{},"dependencies.html":{}}}],["new",{"_index":181,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["node.js",{"_index":526,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":228,"title":{},"body":{"classes/CharacterService.html":{},"classes/EpisodeService.html":{},"classes/LocationService.html":{}}}],["notfoundexception(`character",{"_index":243,"title":{},"body":{"classes/CharacterService.html":{}}}],["notfoundexception(`episode",{"_index":376,"title":{},"body":{"classes/EpisodeService.html":{}}}],["notfoundexception(`location",{"_index":444,"title":{},"body":{"classes/LocationService.html":{}}}],["npm",{"_index":538,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":96,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Location.html":{}}}],["number",{"_index":77,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"entities/Location.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{}}}],["oloriebi",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["onetomany",{"_index":328,"title":{},"body":{"entities/Episode.html":{}}}],["onetomany(undefined",{"_index":319,"title":{},"body":{"entities/Episode.html":{}}}],["onetoone",{"_index":91,"title":{},"body":{"entities/Character.html":{},"entities/Location.html":{}}}],["onetoone(undefined",{"_index":81,"title":{},"body":{"entities/Character.html":{},"entities/Location.html":{}}}],["open",{"_index":557,"title":{},"body":{"index.html":{}}}],["optional",{"_index":118,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["orderby('episodes.releasedate",{"_index":370,"title":{},"body":{"classes/EpisodeService.html":{}}}],["out",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":586,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":487,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":139,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{}}}],["param('characterid",{"_index":270,"title":{},"body":{"controllers/CommentController.html":{},"controllers/EpisodeController.html":{}}}],["param('episodeid",{"_index":271,"title":{},"body":{"controllers/CommentController.html":{}}}],["param('locationid",{"_index":172,"title":{},"body":{"controllers/CharacterController.html":{}}}],["parameters",{"_index":116,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["parseint(value",{"_index":458,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":147,"title":{"injectables/ParseIntPipe.html":{}},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["password",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["pipetransform",{"_index":455,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["please",{"_index":567,"title":{},"body":{"index.html":{}}}],["port",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":140,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["post('/:characterid/episode",{"_index":346,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["post('/:characterid/episode')@apicreatedresponse({description",{"_index":337,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["post('/:characterid/episode/:episodeid/comment",{"_index":268,"title":{},"body":{"controllers/CommentController.html":{}}}],["post('/:characterid/episode/:episodeid/comment')@apicreatedresponse({description",{"_index":251,"title":{},"body":{"controllers/CommentController.html":{}}}],["post('/:locationid/character",{"_index":171,"title":{},"body":{"controllers/CharacterController.html":{}}}],["post('/:locationid/character')@apicreatedresponse({description",{"_index":109,"title":{},"body":{"controllers/CharacterController.html":{}}}],["post('/location",{"_index":417,"title":{},"body":{"controllers/LocationController.html":{}}}],["post('/location')@apicreatedresponse({description",{"_index":409,"title":{},"body":{"controllers/LocationController.html":{}}}],["primarygeneratedcolumn",{"_index":78,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}}}],["private",{"_index":158,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{}}}],["production",{"_index":547,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":525,"title":{},"body":{"index.html":{}}}],["project",{"_index":558,"title":{},"body":{"index.html":{}}}],["promise",{"_index":121,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{}}}],["properties",{"_index":48,"title":{"properties.html":{}},"body":{"entities/Character.html":{},"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"classes/EpisodeDto.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"classes/LocationDto.html":{},"properties.html":{}}}],["providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{}}}],["query",{"_index":141,"title":{},"body":{"controllers/CharacterController.html":{}}}],["read",{"_index":568,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":159,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["reflect",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["release",{"_index":353,"title":{},"body":{"classes/EpisodeDto.html":{}}}],["releasedate",{"_index":316,"title":{},"body":{"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{}}}],["repository",{"_index":219,"title":{},"body":{"classes/CharacterService.html":{},"classes/CommentService.html":{},"classes/EpisodeService.html":{},"classes/LocationService.html":{},"index.html":{}}}],["reset",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resource",{"_index":110,"title":{},"body":{"controllers/CharacterController.html":{}}}],["result",{"_index":295,"title":{},"body":{"classes/CommentService.html":{},"classes/EpisodeService.html":{}}}],["results",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":168,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["retrieved'})@apinotfoundresponse({description",{"_index":124,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["return",{"_index":166,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["returned",{"_index":133,"title":{},"body":{"controllers/CharacterController.html":{}}}],["returns",{"_index":120,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentService.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["rimraf",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":542,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":530,"title":{},"body":{"index.html":{}}}],["search",{"_index":381,"title":{},"body":{"classes/FilterDto.html":{}}}],["server",{"_index":531,"title":{},"body":{"index.html":{}}}],["services/character.service",{"_index":153,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{},"modules/TaskModule.html":{}}}],["services/comment.service",{"_index":264,"title":{},"body":{"controllers/CommentController.html":{},"modules/TaskModule.html":{}}}],["services/episode.service",{"_index":266,"title":{},"body":{"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"modules/TaskModule.html":{}}}],["services/location.service",{"_index":155,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/LocationController.html":{},"modules/TaskModule.html":{}}}],["side",{"_index":532,"title":{},"body":{"index.html":{}}}],["sort",{"_index":232,"title":{},"body":{"classes/CharacterService.html":{},"classes/FilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["source",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"modules/TaskModule.html":{},"index.html":{}}}],["sponsors",{"_index":561,"title":{},"body":{"index.html":{}}}],["src/.../index.enum.ts",{"_index":516,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":522,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":14,"title":{},"body":{"modules/AppModule.html":{}}}],["src/commons/pipes/parseint.pipes.ts",{"_index":447,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/commons/pipes/parseint.pipes.ts:10",{"_index":452,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["src/main.ts",{"_index":482,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/task/controllers/character.controller.ts",{"_index":99,"title":{},"body":{"controllers/CharacterController.html":{},"coverage.html":{}}}],["src/task/controllers/character.controller.ts:30",{"_index":136,"title":{},"body":{"controllers/CharacterController.html":{}}}],["src/task/controllers/character.controller.ts:38",{"_index":131,"title":{},"body":{"controllers/CharacterController.html":{}}}],["src/task/controllers/character.controller.ts:45",{"_index":115,"title":{},"body":{"controllers/CharacterController.html":{}}}],["src/task/controllers/character.controller.ts:72",{"_index":126,"title":{},"body":{"controllers/CharacterController.html":{}}}],["src/task/controllers/comment.controller.ts",{"_index":245,"title":{},"body":{"controllers/CommentController.html":{},"coverage.html":{}}}],["src/task/controllers/comment.controller.ts:24",{"_index":254,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/task/controllers/comment.controller.ts:50",{"_index":258,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/task/controllers/episode.controller.ts",{"_index":332,"title":{},"body":{"controllers/EpisodeController.html":{},"coverage.html":{}}}],["src/task/controllers/episode.controller.ts:21",{"_index":341,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["src/task/controllers/episode.controller.ts:32",{"_index":339,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["src/task/controllers/location.controller.ts",{"_index":404,"title":{},"body":{"controllers/LocationController.html":{},"coverage.html":{}}}],["src/task/controllers/location.controller.ts:24",{"_index":411,"title":{},"body":{"controllers/LocationController.html":{}}}],["src/task/controllers/location.controller.ts:36",{"_index":414,"title":{},"body":{"controllers/LocationController.html":{}}}],["src/task/dtos/character.dto.ts",{"_index":187,"title":{},"body":{"classes/CharacterDto.html":{},"coverage.html":{}}}],["src/task/dtos/character.dto.ts:14",{"_index":191,"title":{},"body":{"classes/CharacterDto.html":{}}}],["src/task/dtos/character.dto.ts:24",{"_index":196,"title":{},"body":{"classes/CharacterDto.html":{}}}],["src/task/dtos/character.dto.ts:33",{"_index":200,"title":{},"body":{"classes/CharacterDto.html":{}}}],["src/task/dtos/character.dto.ts:42",{"_index":194,"title":{},"body":{"classes/CharacterDto.html":{}}}],["src/task/dtos/comment.dto.ts",{"_index":279,"title":{},"body":{"classes/CommentDto.html":{},"coverage.html":{}}}],["src/task/dtos/comment.dto.ts:14",{"_index":281,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/task/dtos/episode.dto.ts",{"_index":348,"title":{},"body":{"classes/EpisodeDto.html":{},"coverage.html":{}}}],["src/task/dtos/episode.dto.ts:14",{"_index":351,"title":{},"body":{"classes/EpisodeDto.html":{}}}],["src/task/dtos/episode.dto.ts:25",{"_index":350,"title":{},"body":{"classes/EpisodeDto.html":{}}}],["src/task/dtos/episode.dto.ts:35",{"_index":354,"title":{},"body":{"classes/EpisodeDto.html":{}}}],["src/task/dtos/filter.dto.ts",{"_index":380,"title":{},"body":{"classes/FilterDto.html":{},"coverage.html":{}}}],["src/task/dtos/filter.dto.ts:11",{"_index":389,"title":{},"body":{"classes/FilterDto.html":{}}}],["src/task/dtos/filter.dto.ts:15",{"_index":385,"title":{},"body":{"classes/FilterDto.html":{}}}],["src/task/dtos/filter.dto.ts:19",{"_index":387,"title":{},"body":{"classes/FilterDto.html":{}}}],["src/task/dtos/filter.dto.ts:7",{"_index":383,"title":{},"body":{"classes/FilterDto.html":{}}}],["src/task/dtos/location.dto.ts",{"_index":422,"title":{},"body":{"classes/LocationDto.html":{},"coverage.html":{}}}],["src/task/dtos/location.dto.ts:13",{"_index":426,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/task/dtos/location.dto.ts:23",{"_index":425,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/task/dtos/location.dto.ts:33",{"_index":424,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/task/entities/character.entity.ts",{"_index":46,"title":{},"body":{"entities/Character.html":{},"coverage.html":{}}}],["src/task/entities/character.entity.ts:10",{"_index":79,"title":{},"body":{"entities/Character.html":{}}}],["src/task/entities/character.entity.ts:13",{"_index":74,"title":{},"body":{"entities/Character.html":{}}}],["src/task/entities/character.entity.ts:16",{"_index":80,"title":{},"body":{"entities/Character.html":{}}}],["src/task/entities/character.entity.ts:20",{"_index":84,"title":{},"body":{"entities/Character.html":{}}}],["src/task/entities/character.entity.ts:23",{"_index":85,"title":{},"body":{"entities/Character.html":{}}}],["src/task/entities/character.entity.ts:26",{"_index":76,"title":{},"body":{"entities/Character.html":{}}}],["src/task/entities/character.entity.ts:29",{"_index":64,"title":{},"body":{"entities/Character.html":{}}}],["src/task/entities/character.entity.ts:33",{"_index":70,"title":{},"body":{"entities/Character.html":{}}}],["src/task/entities/comments.entity.ts",{"_index":300,"title":{},"body":{"entities/Comments.html":{},"coverage.html":{}}}],["src/task/entities/comments.entity.ts:12",{"_index":303,"title":{},"body":{"entities/Comments.html":{}}}],["src/task/entities/comments.entity.ts:15",{"_index":309,"title":{},"body":{"entities/Comments.html":{}}}],["src/task/entities/comments.entity.ts:18",{"_index":304,"title":{},"body":{"entities/Comments.html":{}}}],["src/task/entities/comments.entity.ts:21",{"_index":307,"title":{},"body":{"entities/Comments.html":{}}}],["src/task/entities/comments.entity.ts:9",{"_index":308,"title":{},"body":{"entities/Comments.html":{}}}],["src/task/entities/episode.entity.ts",{"_index":312,"title":{},"body":{"entities/Episode.html":{},"coverage.html":{}}}],["src/task/entities/episode.entity.ts:12",{"_index":326,"title":{},"body":{"entities/Episode.html":{}}}],["src/task/entities/episode.entity.ts:14",{"_index":324,"title":{},"body":{"entities/Episode.html":{}}}],["src/task/entities/episode.entity.ts:17",{"_index":327,"title":{},"body":{"entities/Episode.html":{}}}],["src/task/entities/episode.entity.ts:20",{"_index":323,"title":{},"body":{"entities/Episode.html":{}}}],["src/task/entities/episode.entity.ts:23",{"_index":321,"title":{},"body":{"entities/Episode.html":{}}}],["src/task/entities/episode.entity.ts:24",{"_index":322,"title":{},"body":{"entities/Episode.html":{}}}],["src/task/entities/episode.entity.ts:27",{"_index":318,"title":{},"body":{"entities/Episode.html":{}}}],["src/task/entities/episode.entity.ts:9",{"_index":325,"title":{},"body":{"entities/Episode.html":{}}}],["src/task/entities/index.ts",{"_index":479,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/task/entities/location.entity.ts",{"_index":392,"title":{},"body":{"entities/Location.html":{},"coverage.html":{}}}],["src/task/entities/location.entity.ts:11",{"_index":402,"title":{},"body":{"entities/Location.html":{}}}],["src/task/entities/location.entity.ts:16",{"_index":401,"title":{},"body":{"entities/Location.html":{}}}],["src/task/entities/location.entity.ts:19",{"_index":396,"title":{},"body":{"entities/Location.html":{}}}],["src/task/entities/location.entity.ts:22",{"_index":395,"title":{},"body":{"entities/Location.html":{}}}],["src/task/entities/location.entity.ts:27",{"_index":400,"title":{},"body":{"entities/Location.html":{}}}],["src/task/entities/location.entity.ts:8",{"_index":397,"title":{},"body":{"entities/Location.html":{}}}],["src/task/enum/index.enum.ts",{"_index":517,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/task/services/character.service.ts",{"_index":217,"title":{},"body":{"classes/CharacterService.html":{},"coverage.html":{}}}],["src/task/services/character.service.ts:14",{"_index":227,"title":{},"body":{"classes/CharacterService.html":{}}}],["src/task/services/character.service.ts:18",{"_index":226,"title":{},"body":{"classes/CharacterService.html":{}}}],["src/task/services/character.service.ts:36",{"_index":223,"title":{},"body":{"classes/CharacterService.html":{}}}],["src/task/services/character.service.ts:54",{"_index":225,"title":{},"body":{"classes/CharacterService.html":{}}}],["src/task/services/character.service.ts:9",{"_index":220,"title":{},"body":{"classes/CharacterService.html":{}}}],["src/task/services/comment.service.ts",{"_index":284,"title":{},"body":{"classes/CommentService.html":{},"coverage.html":{}}}],["src/task/services/comment.service.ts:12",{"_index":291,"title":{},"body":{"classes/CommentService.html":{}}}],["src/task/services/comment.service.ts:16",{"_index":290,"title":{},"body":{"classes/CommentService.html":{}}}],["src/task/services/comment.service.ts:6",{"_index":287,"title":{},"body":{"classes/CommentService.html":{}}}],["src/task/services/episode.service.ts",{"_index":356,"title":{},"body":{"classes/EpisodeService.html":{},"coverage.html":{}}}],["src/task/services/episode.service.ts:13",{"_index":364,"title":{},"body":{"classes/EpisodeService.html":{}}}],["src/task/services/episode.service.ts:17",{"_index":363,"title":{},"body":{"classes/EpisodeService.html":{}}}],["src/task/services/episode.service.ts:27",{"_index":360,"title":{},"body":{"classes/EpisodeService.html":{}}}],["src/task/services/episode.service.ts:46",{"_index":362,"title":{},"body":{"classes/EpisodeService.html":{}}}],["src/task/services/episode.service.ts:7",{"_index":358,"title":{},"body":{"classes/EpisodeService.html":{}}}],["src/task/services/location.service.ts",{"_index":427,"title":{},"body":{"classes/LocationService.html":{},"coverage.html":{}}}],["src/task/services/location.service.ts:11",{"_index":434,"title":{},"body":{"classes/LocationService.html":{}}}],["src/task/services/location.service.ts:14",{"_index":433,"title":{},"body":{"classes/LocationService.html":{}}}],["src/task/services/location.service.ts:19",{"_index":437,"title":{},"body":{"classes/LocationService.html":{}}}],["src/task/services/location.service.ts:23",{"_index":436,"title":{},"body":{"classes/LocationService.html":{}}}],["src/task/services/location.service.ts:6",{"_index":430,"title":{},"body":{"classes/LocationService.html":{}}}],["src/task/task.module.ts",{"_index":463,"title":{},"body":{"modules/TaskModule.html":{}}}],["start",{"_index":543,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":546,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":548,"title":{},"body":{"index.html":{}}}],["started",{"_index":524,"title":{"index.html":{}},"body":{}}],["starter",{"_index":536,"title":{},"body":{"index.html":{}}}],["statements",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":56,"title":{},"body":{"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"classes/FilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["stay",{"_index":571,"title":{},"body":{"index.html":{}}}],["string",{"_index":71,"title":{},"body":{"entities/Character.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["successfully",{"_index":112,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["successfully'})@apinotfoundresponse({description",{"_index":135,"title":{},"body":{"controllers/CharacterController.html":{}}}],["support",{"_index":562,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":582,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["task/entities",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["task/task.module",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["taskmodule",{"_index":6,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskmodule,typeormmodule.forroot",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":551,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":554,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":553,"title":{},"body":{"index.html":{}}}],["tests",{"_index":550,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":560,"title":{},"body":{"index.html":{}}}],["this.charactermodel.create",{"_index":239,"title":{},"body":{"classes/CharacterService.html":{}}}],["this.charactermodel.createquerybuilder('character').leftjoinandselect('character.location",{"_index":234,"title":{},"body":{"classes/CharacterService.html":{}}}],["this.charactermodel.findone",{"_index":242,"title":{},"body":{"classes/CharacterService.html":{}}}],["this.charactermodel.save(character",{"_index":241,"title":{},"body":{"classes/CharacterService.html":{},"classes/EpisodeService.html":{}}}],["this.characterservice.createcharacter",{"_index":175,"title":{},"body":{"controllers/CharacterController.html":{}}}],["this.characterservice.getcharacter(characterid",{"_index":185,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{}}}],["this.characterservice.getcharacters(filterdto",{"_index":170,"title":{},"body":{"controllers/CharacterController.html":{}}}],["this.characterservice.gethello",{"_index":165,"title":{},"body":{"controllers/CharacterController.html":{}}}],["this.commentservice.createcomment",{"_index":277,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentsmodel.create(data",{"_index":296,"title":{},"body":{"classes/CommentService.html":{}}}],["this.commentsmodel.save(result",{"_index":299,"title":{},"body":{"classes/CommentService.html":{}}}],["this.episodemodel",{"_index":365,"title":{},"body":{"classes/EpisodeService.html":{}}}],["this.episodemodel.create(data",{"_index":372,"title":{},"body":{"classes/EpisodeService.html":{}}}],["this.episodemodel.findone",{"_index":375,"title":{},"body":{"classes/EpisodeService.html":{}}}],["this.episodemodel.save(episode",{"_index":298,"title":{},"body":{"classes/CommentService.html":{}}}],["this.episodemodel.save(result",{"_index":374,"title":{},"body":{"classes/EpisodeService.html":{}}}],["this.episodeservice.createepisode",{"_index":347,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["this.episodeservice.getepisode",{"_index":272,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.episodeservice.getepisodes",{"_index":345,"title":{},"body":{"controllers/EpisodeController.html":{}}}],["this.locationmodel.create",{"_index":439,"title":{},"body":{"classes/LocationService.html":{}}}],["this.locationmodel.find",{"_index":441,"title":{},"body":{"classes/LocationService.html":{}}}],["this.locationmodel.findone",{"_index":442,"title":{},"body":{"classes/LocationService.html":{}}}],["this.locationmodel.save(location",{"_index":440,"title":{},"body":{"classes/LocationService.html":{}}}],["this.locationservice.createlocation(name",{"_index":419,"title":{},"body":{"controllers/LocationController.html":{}}}],["this.locationservice.getlocation(locationid",{"_index":174,"title":{},"body":{"controllers/CharacterController.html":{}}}],["this.locationservice.getlocations",{"_index":421,"title":{},"body":{"controllers/LocationController.html":{}}}],["throw",{"_index":180,"title":{},"body":{"controllers/CharacterController.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeService.html":{},"controllers/LocationController.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{}}}],["timestamp",{"_index":60,"title":{},"body":{"entities/Character.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"entities/Location.html":{}}}],["touch",{"_index":572,"title":{},"body":{"index.html":{}}}],["transform",{"_index":448,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["transform(value",{"_index":449,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["transformer",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"entities/Episode.html":{}}}],["true})@joincolumn",{"_index":83,"title":{},"body":{"entities/Character.html":{}}}],["true})@jointable",{"_index":69,"title":{},"body":{"entities/Character.html":{}}}],["try",{"_index":173,"title":{},"body":{"controllers/CharacterController.html":{},"controllers/CommentController.html":{},"controllers/EpisodeController.html":{},"controllers/LocationController.html":{}}}],["twitter",{"_index":578,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"entities/Character.html":{},"controllers/CharacterController.html":{},"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"controllers/CommentController.html":{},"classes/CommentDto.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"controllers/EpisodeController.html":{},"classes/EpisodeDto.html":{},"classes/EpisodeService.html":{},"classes/FilterDto.html":{},"entities/Location.html":{},"controllers/LocationController.html":{},"classes/LocationDto.html":{},"classes/LocationService.html":{},"injectables/ParseIntPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":92,"title":{},"body":{"entities/Character.html":{},"classes/CharacterService.html":{},"classes/CommentService.html":{},"entities/Comments.html":{},"entities/Episode.html":{},"classes/EpisodeService.html":{},"entities/Location.html":{},"classes/LocationService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([character",{"_index":468,"title":{},"body":{"modules/TaskModule.html":{}}}],["typescript",{"_index":535,"title":{},"body":{"index.html":{}}}],["ui",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["unit",{"_index":549,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":213,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CharacterService.html":{},"classes/EpisodeService.html":{},"injectables/ParseIntPipe.html":{},"miscellaneous/enumerations.html":{}}}],["unknown'])@apiproperty({enum",{"_index":199,"title":{},"body":{"classes/CharacterDto.html":{}}}],["unlicensed",{"_index":593,"title":{},"body":{"properties.html":{}}}],["username",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["val",{"_index":457,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["validator",{"_index":208,"title":{},"body":{"classes/CharacterDto.html":{},"classes/CommentDto.html":{},"classes/EpisodeDto.html":{},"classes/FilterDto.html":{},"classes/LocationDto.html":{},"dependencies.html":{}}}],["value",{"_index":453,"title":{},"body":{"injectables/ParseIntPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":594,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":591,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":544,"title":{},"body":{"index.html":{}}}],["website",{"_index":576,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":565,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            TaskModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport entities from './TASK/entities';\nimport { TaskModule } from './TASK/task.module';\n\n@Module({\n  imports: [TaskModule,TypeOrmModule.forRoot({\n    type: 'mysql',\n    host: 'localhost',\n    port: 3306,\n    username: 'oloriebi',\n    password: 'Mts121101@',\n    database: 'global_accelerexdb',\n    entities: [...entities],\n    synchronize: true,\n  })],\n  controllers: [],\n  providers: []\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Character.html":{"url":"entities/Character.html","title":"entity - Character","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Character\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/entities/character.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                episodes\n                            \n                            \n                                firstName\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                lastName\n                            \n                            \n                                location\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6)})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/character.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        episodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Episode[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, episodes => episodes.characters, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/character.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/character.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'enum', enum: Gender})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/character.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/character.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/character.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Location\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, location => location.character, {eager: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/character.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'enum', enum: Status})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/character.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        \nimport { Column, CreateDateColumn, Entity, JoinColumn, JoinTable, ManyToMany, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Gender, Status } from '../enum/index.enum';\nimport Episode from './episode.entity';\nimport Location from './location.entity';\n  \n@Entity()\nexport default class Character {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ nullable: false })\n  firstName: string;\n\n  @Column({ nullable: false })\n  lastName: string;\n\n  @OneToOne(() => Location, location => location.character, { eager: true })\n  @JoinColumn()\n  location: Location\n\n  @Column({ nullable: false, type: 'enum', enum: Status })\n  status: Status;\n\n  @Column({ nullable: false, type: 'enum', enum: Gender })\n  gender: Gender;\n\n  @CreateDateColumn({ type: \"timestamp\", default: () => \"CURRENT_TIMESTAMP(6)\" })\n  created: Date;\n  \n  @ManyToMany(() => Episode, episodes => episodes.characters, {eager: true})\n  @JoinTable()\n  episodes: Episode[]\n}\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CharacterController.html":{"url":"controllers/CharacterController.html","title":"controller - CharacterController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CharacterController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/controllers/character.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCharacter\n                            \n                            \n                                    Async\n                                getCharacter\n                            \n                            \n                                    Async\n                                getCharacters\n                            \n                            \n                                    Async\n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCharacter\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCharacter(locationId: number, body: CharacterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:locationId/character')@ApiCreatedResponse({description: 'Resource list has been successfully created'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/character.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    locationId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                CharacterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCharacter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCharacter(characterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'Resource has been successfully retrieved'})@ApiNotFoundResponse({description: 'Not found'})@Get('/:characterId/character')\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/character.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    characterId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCharacters\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCharacters(filterDto: FilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/characters')@ApiOkResponse({description: 'Resource has been successfully retrieved'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/character.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                FilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/hello')@ApiOkResponse({description: 'Returned Hello ! successfully'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/character.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Get,\n  InternalServerErrorException,\n  Param,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { ParseIntPipe } from '../../commons/pipes/parseInt.pipes';\nimport CharacterDto from '../dtos/character.dto';\nimport { FilterDto } from '../dtos/filter.dto';\nimport Character from '../entities/character.entity';\nimport CharacterService from '../services/character.service';\nimport LocationService from '../services/location.service';\n\n@ApiTags('Character')\n@Controller()\nexport default class CharacterController {\n  constructor(\n    private readonly characterService: CharacterService,\n    private readonly locationService: LocationService,\n  ) {}\n\n  @Get('/hello')\n  @ApiOkResponse({ description: 'Returned Hello ! successfully'})\n  @ApiNotFoundResponse({ description: 'Not found'})\n  async getHello(): Promise {\n    const helloResponse = await this.characterService.getHello();\n    return helloResponse;\n  }\n \n  @Get('/characters')\n  @ApiOkResponse({ description: 'Resource has been successfully retrieved'})\n  @ApiNotFoundResponse({ description: 'Not found'})\n  async getCharacters(@Query() filterDto: FilterDto): Promise {\n    return this.characterService.getCharacters(filterDto)\n  }\n\n  @Post('/:locationId/character')\n  @ApiCreatedResponse({ description: 'Resource list has been successfully created'})\n  @ApiNotFoundResponse({ description: 'Not found'})\n  async createCharacter(\n    @Param('locationId', ParseIntPipe) locationId: number,\n    @Body() body: CharacterDto,\n  ): Promise {\n    try {\n      const location = await this.locationService.getLocation(locationId);\n      const { firstName, lastName, status, gender } = body;\n      const createCharacter = await this.characterService.createCharacter(\n        firstName,\n        lastName,\n        status,\n        gender,\n        location,\n      );\n      return createCharacter;\n    } catch (error) {\n      if(error.code === 'ER_DUP_ENTRY') {\n        throw new ConflictException('A character can only be at a location')\n      } else {\n        throw new InternalServerErrorException\n      }\n    }\n  }\n\n  @ApiOkResponse({ description: 'Resource has been successfully retrieved'})\n  @ApiNotFoundResponse({ description: 'Not found'})\n  @Get('/:characterId/character')\n  async getCharacter(@Param('characterId', ParseIntPipe) characterId: number): Promise {\n    try {\n      return await this.characterService.getCharacter(characterId);\n    } catch (error) {\n      throw new InternalServerErrorException\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CharacterDto.html":{"url":"classes/CharacterDto.html","title":"class - CharacterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CharacterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/dtos/character.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstName\n                            \n                            \n                                gender\n                            \n                            \n                                lastName\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Firstname is missing.'})@ApiProperty({type: String, description: 'Character first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/character.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEnum(Gender)@IsIn(['male', 'female'])@ApiProperty({enum: Gender, description: 'Character gender'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/character.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Lastname is missing.'})@ApiProperty({type: String, description: 'Character last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/character.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEnum(Status)@IsIn(['dead', 'active', 'unknown'])@ApiProperty({enum: Status, description: 'Character status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/character.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsIn, IsInt, IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { Gender, Status } from '../enum/index.enum';\n\nexport default class CharacterDto {\n  @IsString()\n  @IsNotEmpty({\n    message: 'Firstname is missing.',\n  })\n  @ApiProperty({\n    type: String,\n    description: 'Character first name'\n  })\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty({\n    message: 'Lastname is missing.',\n  })\n  @ApiProperty({\n    type: String,\n    description: 'Character last name'\n  })\n  lastName: string;\n\n  @IsString()\n  @IsEnum(Status)\n  @IsIn(['dead', 'active', 'unknown'])\n  @ApiProperty({\n    enum: Status,\n    description: 'Character status'\n  })\n  status: Status;\n\n  @IsString()\n  @IsEnum(Gender)\n  @IsIn(['male', 'female'])\n  @ApiProperty({\n    enum: Gender,\n    description: 'Character gender'\n  })\n  gender: Gender;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CharacterService.html":{"url":"classes/CharacterService.html","title":"class - CharacterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CharacterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/services/character.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCharacter\n                            \n                            \n                                    Async\n                                getCharacter\n                            \n                            \n                                    Async\n                                getCharacters\n                            \n                            \n                                    Async\n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(characterModel: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/TASK/services/character.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        characterModel\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCharacter\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCharacter(firstName: string, lastName: string, status: Status, gender: Gender, location: Location)\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/character.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    firstName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lastName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                Status\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    gender\n                                    \n                                                Gender\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    location\n                                    \n                                                Location\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCharacter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCharacter(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/character.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCharacters\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCharacters(filterDto: FilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/character.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                FilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/character.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { FilterDto } from '../dtos/filter.dto';\nimport Character from '../entities/character.entity';\nimport Location from '../entities/location.entity';\nimport { Gender, Status } from '../enum/index.enum';\n\nexport default class CharacterService {\n  constructor(\n    @InjectRepository(Character) private characterModel: Repository\n  ) {}\n\n  async getHello(): Promise {\n    return 'Hello !';\n  }\n\n  async getCharacters(filterDto: FilterDto) {\n    const { gender, status, sort } = filterDto;\n    const builder = this.characterModel.createQueryBuilder('character').leftJoinAndSelect('character.location', 'location');\n    if (status) {\n      builder.andWhere('character.status = :status', { status });\n    }\n\n    if (gender) {\n      builder.andWhere('character.gender = :gender', { gender });\n    }\n\n    if (sort) {\n      builder.orderBy('location.name', sort);\n    }\n    return await builder.getMany();\n\n  }\n\n  async createCharacter(\n    firstName: string,\n    lastName: string,\n    status: Status,\n    gender: Gender,\n    location: Location,\n  ): Promise {\n    const character = this.characterModel.create({\n      firstName,\n      lastName,\n      status,\n      gender,\n    });\n    character.location = location;\n\n    return this.characterModel.save(character);\n  }\n\n  async getCharacter(id: number): Promise {\n    const character = await this.characterModel.findOne({\n      where: { id },\n    });\n\n    if (!character) {\n      throw new NotFoundException(`Character with ID \"${id}\" not found`);\n    }\n\n    return character;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/controllers/comment.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(characterId: number, episodeId: number, body: CommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:characterId/episode/:episodeId/comment')@ApiCreatedResponse({description: 'Successfully made a comment'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/comment.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    characterId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    episodeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                CommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(characterId: number, episodeId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:characterId/episode/:episodeId/comments')@ApiOkResponse({description: 'Comments have been successfully retrieved'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/comment.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    characterId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    episodeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, InternalServerErrorException, Param, Post } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport axios from 'axios';\nimport { ParseIntPipe } from '../../commons/pipes/parseInt.pipes';\nimport CommentDto from '../dtos/comment.dto';\nimport Comments from '../entities/comments.entity';\nimport Episode from '../entities/episode.entity';\nimport CharacterService from '../services/character.service';\nimport CommentService from '../services/comment.service';\nimport EpisodeService from '../services/episode.service';\n\n@ApiTags('Comments')\n@Controller()\nexport default class CommentController {\n  constructor(\n    private readonly characterService: CharacterService,\n    private readonly commentService: CommentService,\n    private readonly episodeService: EpisodeService,\n  ) {}\n\n  @Post('/:characterId/episode/:episodeId/comment')\n  @ApiCreatedResponse({ description: 'Successfully made a comment'})\n  @ApiNotFoundResponse({ description: 'Not found'})\n  async createComment(\n    @Param('characterId', ParseIntPipe) characterId: number,\n    @Param('episodeId', ParseIntPipe) episodeId: number,\n    @Body() body: CommentDto\n  ): Promise{\n    try {\n      await this.characterService.getCharacter(characterId);\n    const episode = await this.episodeService.getEpisode( episodeId);\n    const { comment } = body;\n\n    const { data } = await axios.get('https://api.ipify.org/?format=json');\n    const ipAddressLocation = data.ip\n    \n    return await this.commentService.createComment(\n      episode,\n      ipAddressLocation,\n      comment,\n    );\n    } catch (error) {\n      throw new InternalServerErrorException\n    }\n  }\n\n  @Get('/:characterId/episode/:episodeId/comments')\n  @ApiOkResponse({ description: 'Comments have been successfully retrieved'})\n  @ApiNotFoundResponse({ description: 'Not found'})\n  async getComments(\n    @Param('characterId', ParseIntPipe) characterId: number,\n    @Param('episodeId', ParseIntPipe) episodeId: number\n  ): Promise {\n    try {\n      await this.characterService.getCharacter(characterId);\n      return await this.episodeService.getEpisode( episodeId);  \n    } catch (error) {\n      throw new InternalServerErrorException\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentDto.html":{"url":"classes/CommentDto.html","title":"class - CommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/dtos/comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Comment cannot be empty.'})@ApiProperty({type: String, description: 'Comment'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/comment.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsIn, IsNotEmpty, IsNumber, IsString, MaxLength } from 'class-validator';\n\nexport default class CommentDto {\n  @IsString()\n  @IsNotEmpty({\n    message: 'Comment cannot be empty.',\n  })\n\n  @ApiProperty({\n    type: String,\n    description: 'Comment'\n  })\n  comment: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentService.html":{"url":"classes/CommentService.html","title":"class - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/services/comment.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsModel: Repository, episodeModel: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/TASK/services/comment.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsModel\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        episodeModel\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(episode: Episode, ipAddressLocation: string, comment: string)\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/comment.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    episode\n                                    \n                                                Episode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ipAddressLocation\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/comment.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport Comments from \"../entities/comments.entity\";\nimport Episode from \"../entities/episode.entity\";\n\nexport default class CommentService {\n  constructor(\n   @InjectRepository(Comments) private commentsModel: Repository,\n   @InjectRepository(Episode) private episodeModel: Repository\n  ) {}\n\n  async getHello(): Promise {\n    return 'Hello !';\n  }\n\n  async createComment(episode:Episode, ipAddressLocation: string, comment: string): Promise {\n      const data = { ipAddressLocation, comment };\n    \n      const result = this.commentsModel.create(data)\n      \n      episode.comments.push(result)\n\n      await this.episodeModel.save(episode)\n      return await this.commentsModel.save(result)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comments.html":{"url":"entities/Comments.html","title":"entity - Comments","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/entities/comments.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                            \n                                created\n                            \n                            \n                                episode\n                            \n                            \n                                id\n                            \n                            \n                                ipAddressLocation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 249, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/comments.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6)})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/comments.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        episode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Episode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, episode => episode.comments, {eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/comments.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/comments.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ipAddressLocation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/comments.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn, CreateDateColumn } from 'typeorm';\nimport Episode from './episode.entity';\n\n  \n  @Entity()\n  export default class Comments {\n\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column({ length: 249, nullable: false })\n    comment: string;\n\n    @Column({ nullable: false })\n    ipAddressLocation: string;\n\n    @CreateDateColumn({ type: \"timestamp\", default: () => \"CURRENT_TIMESTAMP(6)\" })\n    created: Date;\n\n    @ManyToOne(() => Episode, episode => episode.comments, { eager: false })\n    episode: Episode;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Episode.html":{"url":"entities/Episode.html","title":"entity - Episode","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Episode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/entities/episode.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                characters\n                            \n                            \n                                comments\n                            \n                            \n                                commentsCount\n                            \n                            \n                                created\n                            \n                            \n                                episodeCode\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                releaseDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        characters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Character[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, characters => characters.episodes, {eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/episode.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comments[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comments => comments.episode, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/episode.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commentsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/episode.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6)})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/episode.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        episodeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/episode.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/episode.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/episode.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        releaseDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/episode.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToMany, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport Character from './character.entity';\nimport Comments from './comments.entity';\n\n  \n  @Entity()\n  export default class Episode {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n    @Column()\n    episodeCode: string;\n\n    @Column()\n    releaseDate: Date;\n\n    @CreateDateColumn({ type: \"timestamp\", default: () => \"CURRENT_TIMESTAMP(6)\" })\n    created: Date;\n\n    @OneToMany(() => Comments, comments => comments.episode, { eager: true })\n    comments: Comments[]\n    commentsCount: number;\n\n    @ManyToMany(() => Character, characters => characters.episodes, {eager: false})\n    characters: Character[]\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EpisodeController.html":{"url":"controllers/EpisodeController.html","title":"controller - EpisodeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EpisodeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/controllers/episode.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEpisode\n                            \n                            \n                                    Async\n                                getEpisodes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEpisode\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEpisode(characterId: number, body: EpisodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:characterId/episode')@ApiCreatedResponse({description: 'Successfully created an episode'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/episode.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    characterId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                EpisodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEpisodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEpisodes()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/episodes')@ApiOkResponse({description: 'Episodes have been successfully retrieved'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/episode.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, InternalServerErrorException, Param, Post } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { ParseIntPipe } from '../../commons/pipes/parseInt.pipes';\nimport EpisodeDto from '../dtos/episode.dto';\nimport Episode from '../entities/episode.entity';\nimport CharacterService from '../services/character.service';\nimport EpisodeService from '../services/episode.service';\n\n\n@ApiTags('Episode')\n@Controller()\nexport default class EpisodeController {\n  constructor(\n    private readonly characterService: CharacterService,\n    private readonly episodeService: EpisodeService,\n  ) {}\n\n  @Get('/episodes')\n  @ApiOkResponse({ description: 'Episodes have been successfully retrieved'})\n  @ApiNotFoundResponse({ description: 'Not found'})\n  async getEpisodes(): Promise {\n    try {\n      return await this.episodeService.getEpisodes();\n    } catch (error) {\n      throw new InternalServerErrorException\n    }\n  }\n\n  @Post('/:characterId/episode')\n  @ApiCreatedResponse({ description: 'Successfully created an episode'})\n  @ApiNotFoundResponse({ description: 'Not found'})\n  async createEpisode(\n    @Param('characterId', ParseIntPipe) characterId: number,\n    @Body() body: EpisodeDto,\n  ): Promise {\n    try {\n      const character = await this.characterService.getCharacter(characterId);\n    const releaseDate = new Date();\n    const { name, episodeCode } = body;\n    return await this.episodeService.createEpisode(\n      character,\n      name,\n      episodeCode,\n      releaseDate,\n    );\n    } catch (error) {\n      throw new InternalServerErrorException\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EpisodeDto.html":{"url":"classes/EpisodeDto.html","title":"class - EpisodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EpisodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/dtos/episode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                episodeCode\n                            \n                            \n                                name\n                            \n                            \n                                releaseDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        episodeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Episode code must not be empty.'})@ApiProperty({type: String, description: 'Episode code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/episode.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Episode name must not be empty.'})@ApiProperty({type: String, description: 'Episode name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/episode.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        releaseDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsNotEmpty({message: 'Release date must not be empty.'})@ApiProperty({type: Date, description: 'Episode release date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/episode.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsIn, IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport default class EpisodeDto {\n  @IsString()\n  @IsNotEmpty({\n    message: 'Episode name must not be empty.',\n  })\n\n  @ApiProperty({\n    type: String,\n    description: 'Episode name'\n  })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty({\n    message: 'Episode code must not be empty.',\n  })\n\n  @ApiProperty({\n    type: String,\n    description: 'Episode code'\n  })\n  episodeCode: string;\n\n  @IsDate()\n  @IsNotEmpty({\n    message: 'Release date must not be empty.',\n  })\n  @ApiProperty({\n    type: Date,\n    description: 'Episode release date'\n  })\n  releaseDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EpisodeService.html":{"url":"classes/EpisodeService.html","title":"class - EpisodeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EpisodeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/services/episode.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEpisode\n                            \n                            \n                                    Async\n                                getEpisode\n                            \n                            \n                                    Async\n                                getEpisodes\n                            \n                            \n                                    Async\n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(characterModel: Repository, episodeModel: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/TASK/services/episode.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        characterModel\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        episodeModel\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEpisode\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEpisode(character: Character, name: string, episodeCode: string, releaseDate: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/episode.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    character\n                                    \n                                                Character\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    episodeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    releaseDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEpisode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEpisode(episodeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/episode.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    episodeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEpisodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEpisodes()\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/episode.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/episode.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Character from '../entities/character.entity';\nimport Episode from '../entities/episode.entity';\n\nexport default class EpisodeService {\n  constructor(\n    @InjectRepository(Character) private characterModel: Repository,\n    @InjectRepository(Episode) private episodeModel: Repository,\n  ) {}\n\n  async getHello(): Promise {\n    return 'Hello !';\n  }\n\n  async getEpisodes() {\n    const builder = this.episodeModel\n      .createQueryBuilder('episodes')\n      .leftJoinAndSelect('episodes.comments', 'comments')\n      .loadRelationCountAndMap('episodes.commentsCount', 'episodes.comments')\n      .orderBy('episodes.releaseDate', 'ASC');\n\n    return await builder.getMany();\n  }\n\n  async createEpisode(\n    character: Character,\n    name: string,\n    episodeCode: string,\n    releaseDate: Date,\n  ): Promise {\n    const data = {\n      name,\n      episodeCode,\n      releaseDate,\n    };\n    const result = this.episodeModel.create(data);\n    \n    character.episodes.push(result);\n    await this.characterModel.save(character);\n\n    return await this.episodeModel.save(result);\n  }\n\n  async getEpisode( episodeId: number): Promise {\n    const episode = await this.episodeModel.findOne({ where: {id: episodeId}})\n\n    if (!episode) {\n      throw new NotFoundException(`Episode with ID: ${episodeId} not found`);\n    }\n\n    return episode;\n  }\n  // async getEpisode(character: Character, episodeId: number): Promise {\n  //   const episode = character.episodes.find(\n  //     (episode) => episode.id == episodeId,\n  //   );\n\n  //   if (!episode) {\n  //     throw new NotFoundException(`Episode with ID: ${episodeId} not found`);\n  //   }\n\n  //   return episode;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterDto.html":{"url":"classes/FilterDto.html","title":"class - FilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/dtos/filter.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                gender\n                            \n                            \n                                    Optional\n                                search\n                            \n                            \n                                    Optional\n                                sort\n                            \n                            \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(Gender)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/filter.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/filter.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Sort\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(Sort)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/filter.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(Status)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/filter.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { Gender, Sort, Status } from '../enum/index.enum';\n\nexport class FilterDto {\n  @IsOptional()\n  @IsEnum(Gender)\n  gender?: Gender;\n\n  @IsOptional()\n  @IsEnum(Status)\n  status?: Status;\n\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @IsOptional()\n  @IsEnum(Sort)\n  sort?: Sort;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Location.html":{"url":"entities/Location.html","title":"entity - Location","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Location\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/entities/location.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                character\n                            \n                            \n                                created\n                            \n                            \n                                id\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        character\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Character\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, character => character.location, {eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/location.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6)})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/location.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/location.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'double', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/location.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'double'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/location.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/entities/location.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport Character from './character.entity';\n\n  \n  @Entity()\n  export default class Location {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ nullable: false })\n    name: string;\n\n    @Column({\n      type: 'double'\n    })\n    longitude: number;\n\n    @CreateDateColumn({ type: \"timestamp\", default: () => \"CURRENT_TIMESTAMP(6)\" })\n    created: Date;\n\n    @OneToOne(() => Character, character => character.location, { eager: false })\n    character: Character;\n\n    @Column({\n      type: 'double', nullable: false\n    })\n    latitude: number;\n\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LocationController.html":{"url":"controllers/LocationController.html","title":"controller - LocationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LocationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/controllers/location.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLocation\n                            \n                            \n                                    Async\n                                getLocations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLocation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLocation(body: LocationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/location')@ApiCreatedResponse({description: 'Successfully created a location'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/location.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LocationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLocations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocations()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/location')@ApiOkResponse({description: 'Locations have been successfully retrieved'})@ApiNotFoundResponse({description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/TASK/controllers/location.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, InternalServerErrorException, Post } from '@nestjs/common';\nimport {\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport LocationDto from '../dtos/location.dto';\nimport Location from '../entities/location.entity';\nimport CharacterService from '../services/character.service';\nimport LocationService from '../services/location.service';\n\n@ApiTags('Location')\n@Controller()\nexport default class LocationController {\n  constructor(\n    private readonly characterService: CharacterService,\n    private readonly locationService: LocationService,\n  ) {}\n\n  @Post('/location')\n  @ApiCreatedResponse({ description: 'Successfully created a location' })\n  @ApiNotFoundResponse({ description: 'Not found' })\n  async createLocation(@Body() body: LocationDto): Promise {\n    try {\n      const { name, longitude, latitude } = body;\n      return await this.locationService.createLocation(name, longitude, latitude);\n    } catch (error) {\n      throw new InternalServerErrorException\n    }\n  }\n\n  @Get('/location')\n  @ApiOkResponse({ description: 'Locations have been successfully retrieved' })\n  @ApiNotFoundResponse({ description: 'Not found' })\n  async getLocations(): Promise {\n    try {\n      return await this.locationService.getLocations();\n    } catch (error) {\n      throw new InternalServerErrorException\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocationDto.html":{"url":"classes/LocationDto.html","title":"class - LocationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/dtos/location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty({message: 'Location latitude must not be empty.'})@ApiProperty({type: Number, description: 'Location longitude'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/location.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty({message: 'Location longitude must not be empty.'})@ApiProperty({type: Number, description: 'Location longitude'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/location.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Location name must not be empty.'})@ApiProperty({type: String, description: 'Location name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/TASK/dtos/location.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport default class LocationDto {\n  @IsString()\n  @IsNotEmpty({\n    message: 'Location name must not be empty.',\n  })\n  @ApiProperty({\n    type: String,\n    description: 'Location name'\n  })\n  name: string;\n\n  @IsNumber()\n  @IsNotEmpty({\n    message: 'Location longitude must not be empty.',\n  })\n  @ApiProperty({\n    type: Number,\n    description: 'Location longitude'\n  })\n  longitude: number;\n\n  @IsNumber()\n  @IsNotEmpty({\n    message: 'Location latitude must not be empty.',\n  })\n  @ApiProperty({\n    type: Number,\n    description: 'Location longitude'\n  })\n  latitude: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocationService.html":{"url":"classes/LocationService.html","title":"class - LocationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/TASK/services/location.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLocation\n                            \n                            \n                                    Async\n                                getHello\n                            \n                            \n                                    Async\n                                getLocation\n                            \n                            \n                                    Async\n                                getLocations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(locationModel: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/TASK/services/location.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        locationModel\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLocation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLocation(name: string, longitude: number, latitude: number)\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/location.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    longitude\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    latitude\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/location.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLocation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocation(locationId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/location.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    locationId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLocations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocations()\n                \n            \n\n\n            \n                \n                    Defined in src/TASK/services/location.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Location from '../entities/location.entity';\n\nexport default class LocationService {\n  constructor(\n    @InjectRepository(Location) private locationModel: Repository\n  ) {}\n\n  async getHello(): Promise {\n    return 'Hello !';\n  }\n  async createLocation(name: string, longitude: number, latitude: number): Promise {\n      const location = this.locationModel.create({ name, longitude, latitude });\n      return await this.locationModel.save(location);\n  }\n\n  async getLocations(): Promise {\n      return await this.locationModel.find();\n  }\n\n  async getLocation(locationId: number): Promise {\n    const location = await this.locationModel.findOne({ where: { id: locationId } });\n    if(!location) {\n      throw new NotFoundException(`Location with ID \"${locationId}\" not found`);\n    }\n    return location;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/pipes/parseInt.pipes.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/commons/pipes/parseInt.pipes.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    PipeTransform,\n    Injectable,\n    ArgumentMetadata,\n  } from '@nestjs/common';\n  \n  @Injectable()\n  export class ParseIntPipe implements PipeTransform {\n    async transform(value: string, metadata: ArgumentMetadata) {\n      const val = parseInt(value, 10);\n      if (isNaN(val)) {\n        throw new BadRequestException('Validation failed');\n      }\n      return val;\n    }\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/TASK/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CharacterController\n                        \n                        \n                            CommentController\n                        \n                        \n                            EpisodeController\n                        \n                        \n                            LocationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport CharacterController from './controllers/character.controller';\nimport CommentController from './controllers/comment.controller';\nimport EpisodeController from './controllers/episode.controller';\nimport LocationController from './controllers/location.controller';\nimport Character from './entities/character.entity';\nimport Comments from './entities/comments.entity';\nimport Episode from './entities/episode.entity';\nimport Location from './entities/location.entity';\nimport CharacterService from './services/character.service';\nimport CommentService from './services/comment.service';\nimport EpisodeService from './services/episode.service';\nimport LocationService from './services/location.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Character, Location, Episode, Comments])],\n  controllers: [CharacterController, CommentController, EpisodeController, LocationController],\n  providers: [CharacterService, LocationService, CommentService, EpisodeService]\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/TASK/controllers/character.controller.ts\n            \n            controller\n            CharacterController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/TASK/controllers/comment.controller.ts\n            \n            controller\n            CommentController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/TASK/controllers/episode.controller.ts\n            \n            controller\n            EpisodeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/TASK/controllers/location.controller.ts\n            \n            controller\n            LocationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/TASK/dtos/character.dto.ts\n            \n            class\n            CharacterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/TASK/dtos/comment.dto.ts\n            \n            class\n            CommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/TASK/dtos/episode.dto.ts\n            \n            class\n            EpisodeDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/TASK/dtos/filter.dto.ts\n            \n            class\n            FilterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/TASK/dtos/location.dto.ts\n            \n            class\n            LocationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/TASK/entities/character.entity.ts\n            \n            entity\n            Character\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/TASK/entities/comments.entity.ts\n            \n            entity\n            Comments\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/TASK/entities/episode.entity.ts\n            \n            entity\n            Episode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/TASK/entities/index.ts\n            \n            variable\n            entities\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/TASK/entities/location.entity.ts\n            \n            entity\n            Location\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/TASK/services/character.service.ts\n            \n            class\n            CharacterService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/TASK/services/comment.service.ts\n            \n            class\n            CommentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/TASK/services/episode.service.ts\n            \n            class\n            EpisodeService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/TASK/services/location.service.ts\n            \n            class\n            LocationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/commons/pipes/parseInt.pipes.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            axios : ^0.27.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.0\n        \n            mysql2 : ^2.3.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.3.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Gender   (src/.../index.enum.ts)\n                        \n                        \n                            Sort   (src/.../index.enum.ts)\n                        \n                        \n                            Status   (src/.../index.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/TASK/enum/index.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Sort\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 DEAD\n                            \n                        \n                        \n                            \n                                Value : dead\n                            \n                        \n                        \n                            \n                                 UNKNOWN\n                            \n                        \n                        \n                            \n                                Value : unknown\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            entities   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/TASK/entities/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [Character, Location, Episode, Comments]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
